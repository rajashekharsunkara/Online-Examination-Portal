name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Backend Tests
  test-api:
    name: Test API
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          cd api
          pip install -r requirements.txt
      
      - name: Lint with flake8
        run: |
          cd api
          flake8 app tests --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 app tests --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics
      
      - name: Format check with black
        run: |
          cd api
          black --check app tests
      
      - name: Type check with mypy
        run: |
          cd api
          mypy app || true  # Don't fail on type errors in Chunk 0
      
      - name: Run tests
        env:
          DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key
        run: |
          cd api
          pytest -v --cov=app --cov-report=xml --cov-report=term
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./api/coverage.xml
          flags: backend

  # Frontend Tests - Web
  test-web:
    name: Test Web App
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: web/package-lock.json
      
      - name: Install dependencies
        run: |
          cd web
          npm ci
      
      - name: Lint
        run: |
          cd web
          npm run lint
      
      - name: Run tests
        run: |
          cd web
          npm test -- --run
      
      - name: Build
        run: |
          cd web
          npm run build

  # Frontend Tests - Admin
  test-admin:
    name: Test Admin Dashboard
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: admin/package-lock.json
      
      - name: Install dependencies
        run: |
          cd admin
          npm ci
      
      - name: Lint
        run: |
          cd admin
          npm run lint
      
      - name: Build
        run: |
          cd admin
          npm run build

  # Docker Build
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test-api, test-web, test-admin]
    if: github.event_name == 'push'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build API image
        uses: docker/build-push-action@v5
        with:
          context: ./api
          file: ./api/Dockerfile
          push: false
          tags: exam-platform-api:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build Web image
        uses: docker/build-push-action@v5
        with:
          context: ./web
          file: ./web/Dockerfile.dev
          push: false
          tags: exam-platform-web:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Placeholder for deployment (will be implemented in Chunk 15)
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [build-docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Placeholder
        run: |
          echo "Deployment will be implemented in Chunk 15"
          echo "This will include:"
          echo "  - Building and pushing Docker images to registry"
          echo "  - Deploying to staging environment"
          echo "  - Running smoke tests"
          echo "  - Optionally deploying to production"
